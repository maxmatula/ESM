@model ESM.Models.Employee
@{
    ViewBag.Title = "Dodaj nowy";
}

<h2>Dodaj nowego pracownika</h2>


@using (Html.BeginForm("Create", "Employees", FormMethod.Post, new { enctype = "multipart/form-data", id = "form" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Surname, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Surname, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Surname, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.BirthDate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.BirthDate, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.BirthDate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.Label("Zdjęcie", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <input type="file" id="upload" accept="image/*" />
                <label for="upload" class="btn btn-danger"><i class="fa fa-download"></i> Wybierz plik <strong><span></span></strong></label>
                <br />
                @if (Model.PictureData == null)
                {
                    <div class="form-control-static">Brak zdjęcia</div>
                }
                else
                {
                    <img class="image-thumbnail" width="200" height="200"
                         src="@Url.Action("GetPicture", "Employees", new { employeeId = Model.EmployeeId })" />
                }
            </div>
            <input type="hidden" id="imagebase64" name="picture" />
        </div>
        <div id="croop-image"></div>

        <div class="form-group">
            <div class="col-md-offset-1 col-md-10">
                <input type="submit" value="Utwórz" class="btn btn-success" />
                <hr />
                @Html.ActionLink("Powrót", "Index")
            </div>
        </div>
    </div>
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/Scripts/croppie.js")
    @Scripts.Render("~/Scripts/croppie/croppie-round.js")
}
